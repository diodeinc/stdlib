load("../config.zen", "config_properties", "config_unit")
load("../units.zen", "Current", "Frequency", "Voltage")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Package = enum("SOT-23-3")
BjtType = enum("NPN", "PNP")
Mount = enum("SMD")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Required
package = config("package", Package, convert = Package)
bjt_type = config("bjt_type", BjtType, convert = BjtType)

# Optional
mount = config("mount", Mount, default = Mount("SMD"), optional = True)
hfe = config("hfe", float, optional = True)
vceo = config_unit("vceo", Voltage, optional = True)
vebo = config_unit("vebo", Voltage, optional = True)
vcbo = config_unit("vcbo", Voltage, optional = True)
ic_max = config_unit("ic_max", Current, optional = True)
ft = config_unit("ft", Frequency, optional = True)

# Properties â€“ combined and normalized
properties = config_properties({
    "package": package,
    "bjt_type": bjt_type,
    "hfe": hfe,
    "vceo": vceo,
    "vebo": vebo,
    "vcbo": vcbo,
    "ic_max": ic_max,
    "ft": ft,
})

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

C = io("C", Net)
B = io("B", Net)
E = io("E", Net)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _footprint(package: Package) -> str:
    kicad_footprints = {
        Package("SOT-23-3"): "@kicad-footprints/Package_TO_SOT_SMD.pretty/SOT-23-3.kicad_mod",
    }

    if package not in kicad_footprints:
        error("Invalid package: " + str(package))

    return kicad_footprints[package]

def _name(bjt_type: BjtType) -> str:
    type_str = str(bjt_type.value).lower()
    return "{}-bjt".format(type_str)

def _symbol(bjt_type: BjtType):
    symbols = {
        BjtType("NPN"): Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "Q_NPN"),
        BjtType("PNP"): Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "Q_PNP"),
    }

    if bjt_type not in symbols:
        error("Invalid BJT type: " + str(bjt_type))

    return symbols[bjt_type]

# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name = "Q",
    symbol = _symbol(bjt_type),
    footprint = File(_footprint(package)),
    prefix = "Q",
    pins = {
        "B": B,
        "C": C,
        "E": E,
    },
    properties = properties,
)
