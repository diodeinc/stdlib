load("../config.zen", "config_properties", "config_unit")
load("../units.zen", "Current", "Voltage")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Package = enum("SOD-123", "SOD-323", "SOD-523", "SOT-23", "SMA", "SMB", "SMC")
Variant = enum("Standard", "Schottky", "Zener")
Mount = enum("SMD")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Required
package = config("package", Package)

# Optional
mount = config("mount", Mount, default = Mount("SMD"), optional = True)
variant = config("variant", Variant, default = Variant("Standard"))
v_f = config_unit("v_f", Voltage, optional = True)  # Forward voltage
i_f = config_unit("i_f", Current, optional = True)  # Forward current
v_r = config_unit("v_r", Voltage, optional = True)  # Reverse voltage
i_r = config_unit("i_r", Current, optional = True)  # Reverse current

# Properties
properties = config_properties({
    "mount": mount,
    "package": package,
    "variant": variant,
    "v_f": v_f,
    "i_f": i_f,
    "v_r": v_r,
    "i_r": i_r,
})

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

A = io("A", Net)  # Anode
K = io("K", Net)  # Cathode

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _symbol(variant: Variant):
    symbols = {
        Variant("Standard"): "@kicad-symbols/Device.kicad_sym:D",
        Variant("Schottky"): "@kicad-symbols/Device.kicad_sym:D_Schottky",
        Variant("Zener"): "@kicad-symbols/Device.kicad_sym:D_Zener",
    }

    return {
        "library": symbols[variant].split(":")[0],
        "name": symbols[variant].split(":")[1],
    }

def _footprint(mount: Mount, package: Package):
    kicad_footprints = {
        (Mount("SMD"), Package("SOD-123")): "@kicad-footprints/Diode_SMD.pretty/D_SOD-123.kicad_mod",
        (Mount("SMD"), Package("SOD-323")): "@kicad-footprints/Diode_SMD.pretty/D_SOD-323.kicad_mod",
        (Mount("SMD"), Package("SOD-523")): "@kicad-footprints/Diode_SMD.pretty/D_SOD-523.kicad_mod",
        (Mount("SMD"), Package("SOT-23")): "@kicad-footprints/Package_TO_SOT_SMD.pretty/SOT-23.kicad_mod",
        (Mount("SMD"), Package("SMA")): "@kicad-footprints/Diode_SMD.pretty/D_SMA.kicad_mod",
        (Mount("SMD"), Package("SMB")): "@kicad-footprints/Diode_SMD.pretty/D_SMB.kicad_mod",
        (Mount("SMD"), Package("SMC")): "@kicad-footprints/Diode_SMD.pretty/D_SMC.kicad_mod",
    }

    if (mount, package) not in kicad_footprints:
        error("Invalid footprint: " + str(mount) + " " + str(package))

    return File(kicad_footprints[(mount, package)])

# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name = "D",
    prefix = "D",
    symbol = Symbol(**_symbol(variant)),
    footprint = File(_footprint(mount, package)),
    properties = properties,
    pins = {
        "A": A,
        "K": K,
    },
)
