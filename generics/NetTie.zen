load("../config.zen", "config_properties")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

PadSize = enum("0.3mm", "0.5mm", "1.0mm", "2.0mm")
MountType = enum("SMD", "THT", "SMD_THT")
PinCount = enum("2", "3", "4")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Optional
mount_type = config("mount_type", MountType, default=MountType("SMD"), optional=True)
pad_size = config("pad_size", PadSize, default=PadSize("0.5mm"), optional=True)
pin_count = config("pin_count", int, default=2, optional=True)
use_jumper_footprint = config("use_jumper_footprint", bool, default=False, optional=True)

# Properties â€“ combined and normalized
properties = config_properties({
    "mount_type": mount_type,
    "pad_size": pad_size,
    "pin_count": pin_count,
    "exclude_from_bom": True,
})

def _get_symbol(pin_count):
    """Returns the appropriate net tie symbol based on pin count."""
    return f"Device:NetTie_{pin_count}"

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

P = [io(f"P{i}", Net) for i in range(1, pin_count + 1)]

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------


def _get_footprint(pin_count, mount_type, pad_size, use_jumper_footprint):
    """Returns the appropriate net tie footprint."""
    if use_jumper_footprint:
        # Use jumper footprints as a substitute for net ties
        if pin_count == 2:
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-2_P1.3mm_Open_Pad1.0x1.5mm.kicad_mod")
        elif pin_count == 3:
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-3_P1.3mm_Open_Pad1.0x1.5mm.kicad_mod")
        else:
            # For 4-pin, use a 2x2 jumper arrangement
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-2_P1.3mm_Open_Pad1.0x1.5mm.kicad_mod")
    else:
        pins = str(pin_count)
        mount = mount_type.value
        pad = pad_size.value
        if mount == "SMD_THT":
            if pin_count == 2:
                if pad_size == PadSize("0.3mm"):
                    return File("footprints/NetTie-2_SMD_THT_Pad0.3mm.kicad_mod")
                elif pad_size == PadSize("1.0mm"):
                    return File("footprints/NetTie-2_SMD_THT_Pad1.0mm.kicad_mod")
                else:
                    error(f"Unsupported pad size: {pad_size}")
            else:
                error(f"Unsupported pin count: {pin_count}")    
        elif mount == "SMD" and pin_count == 2 and pad_size == PadSize("0.3mm"):
            return File("footprints/NetTie-2_SMD_Pad0.3mm.kicad_mod")
        else:
            return File(f"@kicad-footprints/NetTie.pretty/NetTie-{pins}_{mount}_Pad{pad}.kicad_mod")

def _get_symbol(pin_count):
    """Returns the appropriate net tie symbol based on pin count."""
    if pin_count == 2:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "NetTie_2")
    elif pin_count == 3:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "NetTie_3")
    elif pin_count == 4:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "NetTie_4")
    else:
        error(f"Unsupported pin count: {pin_count}")


def _get_pins(P):
    """Get both the pin specifications and connection mappings based on pin count."""
    pins = {
        "1": P[0],
        "2": P[1],
    }

    if str(pin_count) >= "3":
        pins["3"] = P[2]

    if str(pin_count) >= "4":
        pins["4"] = P[3]

    return pins


# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name="NT",
    symbol=_get_symbol(pin_count),
    footprint=_get_footprint(pin_count, mount_type, pad_size, use_jumper_footprint),
    prefix="NT",
    pins=_get_pins(P),
    properties=properties,
)
