load("../config.zen", "config_properties", "config_unit")
load("../units.zen", "Capacitance", "Frequency")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Mount = enum("SMD")
Package = enum(
    "0603_4Pin",
    "2012_2Pin",
    "3215_2Pin",
    "5032_2Pin",
    "5032_4Pin",
    "7050_2Pin",
    "7050_4Pin",
    "3225_4Pin",
    "2520_4Pin",
    "2016_4Pin",
    "1210_4Pin",
    "0603_2Pin",
)

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Required
package = config("package", Package, convert = Package)
frequency = config_unit("frequency", Frequency)

# Optional
mount = config("mount", Mount, default = Mount("SMD"), optional = True)
load_capacitance = config_unit("load_capacitance", Capacitance, optional = True)

# Properties â€“ combined and normalized
properties = config_properties({
    "mount": mount,
    "package": package,
    "value": f"frequency: {frequency}, load capacitance: {load_capacitance}",
    "frequency": frequency,
    "load_capacitance": load_capacitance,
})

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

# For 2-pin crystals
XIN = io("XIN", Net)
XOUT = io("XOUT", Net)

# Additional pins for 4-pin crystals
GND = io("GND", Net, optional = True)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _symbol(package: Package):
    if "2Pin" in str(package):
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "Crystal")
    else:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "Crystal_GND24")

def _footprint(package: Package):
    _footprints = {
        Package("2012_2Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_2012-2Pin_2.0x1.2mm.kicad_mod"),
        Package("3215_2Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_3215-2Pin_3.2x1.5mm.kicad_mod"),
        Package("5032_2Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_5032-2Pin_5.0x3.2mm.kicad_mod"),
        Package("5032_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_5032-4Pin_5.0x3.2mm.kicad_mod"),
        Package("7050_2Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_7050-2Pin_7.0x5.0mm.kicad_mod"),
        Package("7050_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_7050-4Pin_7.0x5.0mm.kicad_mod"),
        Package("3225_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_3225-4Pin_3.2x2.5mm.kicad_mod"),
        Package("2520_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_2520-4Pin_2.5x2.0mm.kicad_mod"),
        Package("2016_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_2016-4Pin_2.0x1.6mm.kicad_mod"),
        Package("1210_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_1210-4Pin_1.2x1.0mm.kicad_mod"),
        Package("0603_2Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_0603-2Pin_6.0x3.5mm.kicad_mod"),
        Package("0603_4Pin"): File("@kicad-footprints/Crystal.pretty/Crystal_SMD_0603-4Pin_6.0x3.5mm.kicad_mod"),
    }

    return _footprints[package]

def _pins(package: Package, XIN: Net, XOUT: Net, GND: Net | None):
    if "4Pin" in str(package):
        if not GND:
            error("GND is required for 4-pin crystals")
        pins = {
            "1": XIN,
            "2": GND,
            "3": XOUT,
            "4": GND,
        }
    else:
        pins = {
            "1": XIN,
            "2": XOUT,
        }
    return pins

# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name = "CRYSTAL",
    prefix = "Y",
    symbol = _symbol(package),
    footprint = _footprint(package),
    pins = _pins(package, XIN, XOUT, GND),
    properties = properties,
)
