load("../config.zen", "config_properties")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

SolderJumperStyle = enum(
    "Open",
    "Bridged",
    "Bridged2Bar",
    "Bridged123",
    "Bridged12",
    "Bridged2Bar123",
    "Bridged2Bar12",
)
SolderJumperVariant = enum(
    "Pad",
    "RoundedPad",
    "TrianglePad",
    "Pad_NumberLabels",
    "RoundedPad_NumberLabels",
    "TrianglePad_NumberLabels",
)
SolderJumperPitch = enum("P1.3mm", "P2.0mm")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

pin_count = config("pin_count", int, default=2, optional=True)
style = config("style", SolderJumperStyle, convert=SolderJumperStyle)
variant = config("variant", SolderJumperVariant, convert=SolderJumperVariant)
pitch = config("pitch", SolderJumperPitch, default=SolderJumperPitch("P1.3mm"), optional=True)

# Properties â€“ combined and normalized
properties = config_properties(exclude_from_bom = True, properties = {
    "pin_count": pin_count,
    "style": style,
    "variant": variant,
    "pitch": pitch,
})

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

P = [io(f"P{i}", Net) for i in range(1, pin_count + 1)]

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------


def _footprint(pin_count, style, variant, pitch):
    # Simplified mapping for common solder jumper footprints
    if pin_count == 2:
        if style == SolderJumperStyle("Open"):
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-2_P1.3mm_Open_Pad1.0x1.5mm.kicad_mod")
        else:
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-2_P1.3mm_Bridged_Pad1.0x1.5mm.kicad_mod")
    elif pin_count == 3:
        if style == SolderJumperStyle("Open"):
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-3_P1.3mm_Open_Pad1.0x1.5mm.kicad_mod")
        else:
            return File("@kicad-footprints/Jumper.pretty/SolderJumper-3_P1.3mm_Bridged12_Pad1.0x1.5mm.kicad_mod")
    else:
        error(f"Unsupported pin count: {pin_count}")


def _symbol(pin_count):
    """Returns the appropriate jumper symbol based on pin count."""
    # Use NetTie symbols for solder jumpers
    if pin_count == 2:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "NetTie_2")
    elif pin_count == 3:
        return Symbol(library = "@kicad-symbols/Device.kicad_sym", name = "NetTie_3")
    else:
        error(f"Unsupported pin count: {pin_count}")


def _pins_and_connections(pin_count):
    # pin_defs: mapping of pin name to pin number as string
    # pins: mapping of pin name to net (if connected)
    pin_defs = {}
    pins = {}
    nets = P
    for i in range(pin_count):
        pin_name = "P" + str(i + 1)
        pin_defs[pin_name] = str(i + 1)
        net = nets[i]
        if net != None:
            pins[pin_name] = net
    return pins, pin_defs


# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

pins, pin_defs = _pins_and_connections(pin_count)

Component(
    name="SJ",
    type="solder_jumper",
    symbol=_symbol(pin_count),
    footprint=_footprint(pin_count, style, variant, pitch),
    prefix="JP",
    pins=pins,
    pin_defs=pin_defs,
    properties=properties,
)
