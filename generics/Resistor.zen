load("./SolderJumper.zen", "pin_defs")
load("../config.zen", "config_properties", "config_unit")
load("../units.zen", "Resistance", "Voltage")
load("../utils.zen", "format_value")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Package = enum("0201", "0402", "0603", "0805", "1206", "1210", "2010", "2512")
Mount = enum("SMD")
SymbolType = enum("R", "R_US", "Thermistor_NTC", "Thermistor_NTC_US")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

# Required
package = config("package", Package, default = Package("0603"))
value = config_unit("value", Resistance)
symbol_type = config("symbol_type", SymbolType, default = SymbolType("R"), optional = True)

# Optional
mount = config("mount", Mount, default = Mount("SMD"), optional = True)
voltage = config_unit("voltage", Voltage, optional = True)

# Properties â€“ combined and normalized
properties = config_properties({
    "value": format_value(value, voltage),
    "package": package,
    "resistance": value,
    "voltage": voltage,
})

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

P1 = io("P1", Net)
P2 = io("P2", Net)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _symbol(mount: Mount, package: Package, symbol_type: SymbolType):
    name = "R"
    if symbol_type == SymbolType("Thermistor_NTC"):
        name = "Thermistor_NTC"
    if symbol_type == SymbolType("Thermistor_NTC_US"):
        name = "Thermistor_NTC_US"
    elif symbol_type == SymbolType("R_US"):
        name = "R_US"

    return {
        "library": "@kicad-symbols/Device.kicad_sym",
        "name": name,
    }

def _footprint(mount: Mount, package: Package):
    kicad_footprints = {
        Package("0201"): "@kicad-footprints/Resistor_SMD.pretty/R_0201_0603Metric.kicad_mod",
        Package("0402"): "@kicad-footprints/Resistor_SMD.pretty/R_0402_1005Metric.kicad_mod",
        Package("0603"): "@kicad-footprints/Resistor_SMD.pretty/R_0603_1608Metric.kicad_mod",
        Package("0805"): "@kicad-footprints/Resistor_SMD.pretty/R_0805_2012Metric.kicad_mod",
        Package("1206"): "@kicad-footprints/Resistor_SMD.pretty/R_1206_3216Metric.kicad_mod",
        Package("1210"): "@kicad-footprints/Resistor_SMD.pretty/R_1210_3225Metric.kicad_mod",
        Package("2010"): "@kicad-footprints/Resistor_SMD.pretty/R_2010_5025Metric.kicad_mod",
        Package("2512"): "@kicad-footprints/Resistor_SMD.pretty/R_2512_6332Metric.kicad_mod",
    }

    if package not in kicad_footprints:
        error("Invalid package: " + str(package))

    return kicad_footprints[package]

# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name = "R",
    symbol = Symbol(**_symbol(mount, package, symbol_type)),
    footprint = File(_footprint(mount, package)),
    prefix = "R",
    pin_defs = {
        "P1": "1",
        "P2": "2",
    },
    pins = {
        "P1": P1,
        "P2": P2,
    },
    properties = properties,
)
