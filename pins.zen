Pins = dict[str, Net]
PinOption = record(name=str, interface_type=typing.Any, field=str)
PinMap = dict[str, list[PinOption]]
PinInterfaces = dict[str, list[str]]
PinBuilder = record(pin_map=PinMap, pins=dict[str, Net | None])


def PinInterface(name: str, interface_type) -> struct:
    """Return a struct of PinOption objects for *interface_type* bound to *name*.

    Example:
        load("stdlib/interfaces.zen", "OscPair", "Usb2")
        load("stdlib/pins.zen", "bind_interface")

        OSC = PinInterface("OSC", OscPair, ["xin", "xout"])
        USB = PinInterface("USB", Usb2, ["dp", "dm"])
    """

    # Extract interface fields: str(Spi) -> "<Interface: cs=Net, miso=Net, mosi=Net, clk=Net>"
    fields = dir(interface_type)

    # # One-liner dict-comprehension keeps behaviour yet trims verbosity
    pin_options = {f: PinOption(name=name, interface_type=interface_type, field=f) for f in fields}

    return struct(**pin_options)


def PinMapBuilder(pin_map: PinMap, pin_nets: Pins = {}):
    """Return a stateful, chain-able pin-map builder."""

    state = {
        "pin_map": pin_map,
        "pins": {p: None for p in pin_map},  # type: dict[str, Net | None]
    }

    # ---------------------------------------------------------------------
    # Core helpers
    # ---------------------------------------------------------------------
    def _make_interfaces(_pin_map):
        """Helper: build { interface_name -> { pin_name -> PinOption } }."""
        interfaces = {}
        for _pin, _opts in _pin_map.items():
            for _opt in _opts:
                interfaces.setdefault(_opt.name, {}).setdefault(_pin, _opt)
        return interfaces

    def _connect(pin_name: str, net: Net):
        pins = state["pins"]
        pin_net = pins.get(pin_name)
        if pin_net:
            error(f"Pin already connected: {pin_name} -> {pin_net}, can't be {net}")
        if pin_name not in state["pin_map"]:
            available = state["pin_map"].keys()
            error(f"Pin {pin_name} not found in pin map: {available}")
        pins[pin_name] = net
        return builder  # fluent chaining

    def _assign(name: str, nets, **kwargs):
        interfaces = _make_interfaces(state["pin_map"])
        if name not in interfaces:
            iface_keys = interfaces.keys()
            error(f"{name} not in {iface_keys}")

        # Filter by interface type â€“ only keep pins where *nets* matches.
        iface_pins = {p: o for p, o in interfaces[name].items() if isinstance(nets, o.interface_type)}
        if not iface_pins:
            net_type = str(type(nets))
            error(f"{name} can't take interface of type {net_type}")

        available_pins = iface_pins.keys()
        available_fields = {i.field: None for i in iface_pins.values()}.keys()

        for field, pin_name in kwargs.items():
            pin = iface_pins.get(pin_name)
            if not pin:
                error(f"Pin {pin_name} not found for {name}: {available_pins}")
            if field not in available_fields:
                error(f"Field {field} not found for {name}: {available_fields}")
            if pin.field != field:
                alt_pins = [p for p, i in iface_pins.items() if i.field == field]
                error(f"{pin_name} can't be {name}.{field}: pick from {alt_pins}")
            _connect(pin_name, getattr(nets, field))
        return builder

    # ---------------------------------------------------------------------
    # Public API
    # ---------------------------------------------------------------------
    def assign(name, nets, **kwargs):
        return _assign(name, nets, **kwargs)

    def connect(pin_name, net):
        return _connect(pin_name, net)

    def build(fill_unconnected=False, warn=True):
        result = {}
        unconnected = []
        for _pin, _net in state["pins"].items():
            if _net == None:
                if fill_unconnected:
                    result[_pin] = Net(_pin)
                    unconnected.append(_pin)
            else:
                result[_pin] = _net
        if unconnected and warn:
            print(f"Warning: Unconnected pins: {unconnected}")
        return result

    builder = struct(
        connect=connect,
        assign=assign,
        build=build,
        pins=build,
    )

    for pin, net in pin_nets.items():
        _connect(pin, net)

    return builder
