"""Generic Component Matcher

Automatically assigns house MPNs to resistors and capacitors.
"""

load("@stdlib/units.zen", "Voltage", "Resistance", "Capacitance")
load("helpers.zen", "prop", "set_primary_and_alts", "find_e_series_match", "iec60062_3digit", "iec60062_4digit")


# =============================================================================
# DATA - Edit here to add/remove house parts
# =============================================================================


def murata_gcm_c0g_0402(cap_values, tolerance="1%"):
    """Helper to generate GCM1555C1H C0G 50V 0402 capacitor entries.

    Args:
        cap_values: List of capacitance strings (e.g., ["12pF", "22pF", "100pF"])
        tolerance: Tolerance string (default "1%")

    Returns:
        List of capacitor dictionaries
    """
    result = []
    for cap_str in cap_values:
        cap = Capacitance(cap_str)
        code = iec60062_3digit(cap.value * 1e12)  # Convert to pF
        mpns = ["GCM1555C1H" + code + "FA16D", "GCM1555C1H" + code + "FA16J"]

        result.append(
            {
                "dielectric": "C0G",
                "voltage": "50V",
                "cap": cap_str + " " + tolerance,
                "mpns": mpns,
                "manufacturer": "Murata Electronics",
            }
        )

    return result


# Dielectric quality ranking: C0G/NP0 > X7T > X7R > X7S > X5R > Y5V > Z5U
_DIELECTRIC_RANK = {
    "C0G": 0,
    "NP0": 0,
    "X7T": 1,
    "X7R": 2,
    "X7S": 3,
    "X5R": 4,
    "Y5V": 5,
    "Z5U": 6,
}

# Resistor series by package
SERIES_BY_PKG = {
    "0402": [
        {
            "series": "ERJ-H2CF",
            "min": "1Ohm",
            "max": "10Ohm",
            "max_v": "50V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "X",
        },
        {
            "series": "ERJ-2RKF",
            "min": "10Ohm",
            "max": "1MOhm",
            "max_v": "50V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "X",
        },
        {
            "series": "ERJ-U02J",
            "min": "1MOhm",
            "max": "10MOhm",
            "max_v": "50V",
            "tolerance": "5%",
            "e_series": ["e24"],
            "encode": iec60062_3digit,
            "suffix": "X",
        },
        {
            "series": "ERJ-PA2F",
            "min": "1Ohm",
            "max": "1MOhm",
            "max_v": "50V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "X",
        },
    ],
    "0603": [
        {
            "series": "ERJ-H3EF",
            "min": "1Ohm",
            "max": "10Ohm",
            "max_v": "75V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "V",
        },
        {
            "series": "ERJ-3EKF",
            "min": "10Ohm",
            "max": "1MOhm",
            "max_v": "75V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "V",
        },
        {
            "series": "ERJ-U03J",
            "min": "1MOhm",
            "max": "10MOhm",
            "max_v": "75V",
            "tolerance": "5%",
            "e_series": ["e24"],
            "encode": iec60062_3digit,
            "suffix": "V",
        },
        {
            "series": "ERJ-PA3F",
            "min": "1Ohm",
            "max": "1MOhm",
            "max_v": "75V",
            "tolerance": "1%",
            "e_series": ["e96", "e24"],
            "encode": iec60062_4digit,
            "suffix": "V",
        },
    ],
}

# House capacitor catalog (Murata parts) by package
HOUSE_CAPS_BY_PKG = {
    "0402": murata_gcm_c0g_0402(["12pF", "22pF", "30pF", "47pF", "100pF", "330pF"])
    + [
        {
            "dielectric": "C0G",
            "voltage": "35V",
            "cap": "10nF 2%",
            "mpns": ["GRM1555CYA103GE01D", "GRM1555CYA103GE01J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "10nF 10%",
            "mpns": ["GCM155R71H103KA55D", "GCM155R71H103KA55J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "22nF 10%",
            "mpns": ["GCM155R71H223KA55D", "GCM155R71H223KA55J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "100nF 10%",
            "mpns": ["GCM155R71H104KE02D", "GCM155R71H104KE02J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "10V",
            "cap": "1uF 10%",
            "mpns": ["GRM155Z71A105KE01J", "GRM155Z71A105KE01D"],
            "manufacturer": "Murata Electronics",
        },
    ],
    "0603": [
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "100nF 10%",
            "mpns": ["GCM188R71H104KA57J", "GCM188R71H104KA57D"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "25V",
            "cap": "1uF 10%",
            "mpns": ["GCM188R71E105KA64J", "GCM188R71E105KA64D"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "25V",
            "cap": "2.2uF 20%",
            "mpns": ["GRM188Z71E225ME43D", "GRM188Z71E225ME43J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "16V",
            "cap": "4.7uF 20%",
            "mpns": ["GRM188Z71C475KE21D", "GRM188Z71C475KE21J"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "10V",
            "cap": "10uF 20%",
            "mpns": ["GRM188Z71A106KA73D", "GRM188Z71A106KA73J", "GRM188Z71A106MA73D", "GRM188Z71A106MA73J"],
            "manufacturer": "Murata Electronics",
        },
    ],
    "0805": [
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "4.7uF 20%",
            "mpns": ["GRM21BZ71H475KE15L", "GRM21BZ71H475KE15K", "GRM21BZ71H475ME15K"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "25V",
            "cap": "10uF 10%",
            "mpns": ["GRM21BZ71E106KE15L", "GRM21BZ71E106KE15K"],
            "manufacturer": "Murata Electronics",
        },
    ],
    "1206": [
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "4.7uF 10%",
            "mpns": ["GRM31CR71H475KA12L", "GRM31CR71H475KA12K"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "25V",
            "cap": "10uF 10%",
            "mpns": ["GRM31CR71E106KA12K", "GRM31CR71E106KA12L"],
            "manufacturer": "Murata Electronics",
        },
    ],
    "1210": [
        {
            "dielectric": "X7R",
            "voltage": "50V",
            "cap": "4.7uF 10%",
            "mpns": ["GCM32ER71H475KA55K", "GCM32ER71H475KA55L"],
            "manufacturer": "Murata Electronics",
        },
        {
            "dielectric": "X7R",
            "voltage": "25V",
            "cap": "10uF 10%",
            "mpns": ["GCM32ER71E106KA57L", "GCM32ER71E106KA57K"],
            "manufacturer": "Murata Electronics",
        },
    ],
}


def assign_house_resistor(c, series_by_pkg):
    """Assign house resistor MPNs."""
    if c.type != "resistor" or (hasattr(c, "mpn") and c.mpn):
        return

    resistance = Resistance(prop(c, ["resistance", "Resistance"]))
    pkg = prop(c, ["package", "Package"])
    v_req = prop(c, ["Voltage", "voltage"])
    voltage_constraint = Voltage(v_req).value if v_req else None

    # Skip 0 ohm resistors - they can't be matched to E-series
    if resistance.value <= 0:
        return

    series_list = series_by_pkg.get(pkg, [])
    if not series_list:
        warn(c.name + ": No resistor series available for package " + pkg)
        return

    matches = []
    for spec in series_list:
        spec_min = Resistance(spec["min"]).value
        spec_max = Resistance(spec["max"]).value
        spec_max_v = Voltage(spec["max_v"]).value
        spec_tol = float(spec["tolerance"].replace("%", "")) / 100.0

        if voltage_constraint and voltage_constraint > spec_max_v:
            continue

        matched = find_e_series_match(resistance, spec_tol, spec["e_series"])
        if not matched or matched.value < spec_min or matched.value > spec_max:
            continue

        encoder = spec.get("encode", iec60062_4digit)
        code = encoder(matched.value)
        mpn = spec["series"] + code + spec.get("suffix", "X")
        matches.append(mpn)

    if matches:
        set_primary_and_alts(c, matches[0], "Panasonic Electronic Components", matches[1:])
        return

    # Generate warning
    warn(c.name + ": No house resistor for " + str(resistance) + " " + pkg)


def assign_house_capacitor(c, house_caps_by_pkg):
    """Assign Murata house MPNs to capacitors."""
    if c.type != "capacitor" or (hasattr(c, "mpn") and c.mpn):
        return

    cap = Capacitance(prop(c, ["capacitance", "Capacitance"]))
    pkg = prop(c, ["package", "Package"])
    req_diel = prop(c, ["dielectric", "Dielectric"])
    v_req = prop(c, ["voltage", "Voltage"])
    req_voltage = Voltage(v_req).value if v_req else None

    tol_req = cap.tolerance if cap.tolerance > 0 else 0.2
    req_min = cap.value * (1.0 - tol_req)
    req_max = cap.value * (1.0 + tol_req)

    parts = house_caps_by_pkg.get(pkg, [])
    if not parts:
        warn(c.name + ": No house caps available for package " + pkg)
        return

    best = None
    best_score = None

    for p in parts:
        p_cap = Capacitance(p["cap"])
        p_voltage = Voltage(p["voltage"]).value

        if req_diel:
            h_rank = _DIELECTRIC_RANK.get(p["dielectric"], 99)
            r_rank = _DIELECTRIC_RANK.get(req_diel, 99)
            if h_rank > r_rank:
                continue

        if req_voltage and p_voltage < req_voltage:
            continue

        p_min = p_cap.value * (1.0 - p_cap.tolerance)
        p_max = p_cap.value * (1.0 + p_cap.tolerance)
        if p_min < req_min or p_max > req_max:
            continue

        err = abs(p_cap.value - cap.value) / cap.value
        diel_rank = _DIELECTRIC_RANK.get(p["dielectric"], 99)
        score = (err, p_cap.tolerance, -p_voltage, diel_rank)

        if best_score == None or score < best_score:
            best = p
            best_score = score

    if best:
        set_primary_and_alts(c, best["mpns"][0], best["manufacturer"], best["mpns"][1:])
        return

    # Generate warning
    warn(c.name + ": No house cap for " + str(cap) + " " + pkg)


def add_default_bom_profile():
    builtin.add_component_modifier(lambda c: assign_house_resistor(c, SERIES_BY_PKG))
    builtin.add_component_modifier(lambda c: assign_house_capacitor(c, HOUSE_CAPS_BY_PKG))
