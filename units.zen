# Pure units
PI = 3.14159265358979323846

# Physical Units
Amperes = enum("A")
Volts = enum("V")
Ohms = enum("Ohms")
Farads = enum("F")
Henries = enum("H")
Hertz = enum("Hz")
Seconds = enum("s")
Kelvin = enum("K")


# Conversion functions
def _unit_to_str(self):
    """Convert a unit record to a string representation with SI prefix and tolerance."""
    # Extract the value and tolerance
    value = self.value
    tolerance = self.tolerance * 100  # Convert to percentage

    # Define SI prefixes and their multipliers in descending order
    prefixes = [
        ("Y", 1e24),
        ("Z", 1e21),
        ("E", 1e18),
        ("P", 1e15),
        ("T", 1e12),
        ("G", 1e9),
        ("M", 1e6),
        ("k", 1e3),
        ("", 1),
        ("m", 1e-3),
        ("u", 1e-6),
        ("n", 1e-9),
        ("p", 1e-12),
        ("f", 1e-15),
        ("a", 1e-18),
        ("z", 1e-21),
        ("y", 1e-24),
    ]

    # Find the appropriate prefix
    prefix = ""
    scaled_value = value
    for p, m in prefixes:
        if abs(value) >= m:
            prefix = p
            scaled_value = value / m
            break

    # Format the value with 3 significant digits
    if abs(scaled_value) >= 100:
        # Round to nearest integer (no decimal places)
        rounded = scaled_value + (0.5 if scaled_value >= 0 else -0.5)
        value_str = str(int(rounded))
    elif abs(scaled_value) >= 10:
        # Round to one decimal place
        temp = scaled_value * 10.0
        rounded = temp + (0.5 if temp >= 0 else -0.5)
        value_str = str(int(rounded) / 10.0)
    else:
        # Round to two decimal places
        temp = scaled_value * 100.0
        rounded = temp + (0.5 if temp >= 0 else -0.5)
        value_str = str(int(rounded) / 100.0)

    # Remove trailing zeros after decimal point
    if "." in value_str:
        value_str = value_str.rstrip("0").rstrip(".")

    # Get the unit string and remove quotes
    unit_str = self.unit.value

    # Return formatted string with value, prefix, unit and tolerance
    # Format tolerance as integer by rounding
    if tolerance > 0.0:
        tolerance_str = str(int(tolerance + 0.5))
        return f"{value_str}{prefix}{unit_str} +/-{tolerance_str}%"
    else:
        return f"{value_str}{prefix}{unit_str}"

# Toleranced units
Time = record(
    value=float,
    unit=field(Seconds, Seconds("s")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Current = record(
    value=float,
    unit=field(Amperes, Amperes("A")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Voltage = record(
    value=float,
    unit=field(Volts, Volts("V")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Capacitance = record(
    value=float,
    unit=field(Farads, Farads("F")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Resistance = record(
    value=float,
    unit=field(Ohms, Ohms("Ohms")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Inductance = record(
    value=float,
    unit=field(Henries, Henries("H")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Frequency = record(
    value=float,
    unit=field(Hertz, Hertz("Hz")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)
Temperature = record(
    value=float,
    unit=field(Kelvin, Kelvin("K")),
    tolerance=field(float, 0.0),
    __str__=field(typing.Callable, _unit_to_str),
)


def _check_type(unit, type):
    """Check if the unit is of the correct type."""
    if not isinstance(unit, type):
        error(f"Invalid unit: '{unit}'. Expected '{type}'")
    return unit


def _check_prefix(unit: str, unit_type: str) -> float:
    """Extract and convert a unit prefix to its corresponding multiplier."""

    multipliers = {
        "y": 1e-24,  # yocto
        "z": 1e-21,  # zepto
        "a": 1e-18,  # atto
        "f": 1e-15,  # femto
        "p": 1e-12,  # pico
        "n": 1e-9,  # nano
        "u": 1e-6,  # micro
        "μ": 1e-6,  # micro (Greek letter)
        "m": 1e-3,  # milli
        "c": 1e-2,  # centi
        "d": 1e-1,  # deci
        "": 1.0,  # base unit
        "da": 1e1,  # deca
        "h": 1e2,  # hecto
        "k": 1e3,  # kilo
        "M": 1e6,  # mega
        "G": 1e9,  # giga
        "T": 1e12,  # tera
        "P": 1e15,  # peta
        "E": 1e18,  # exa
        "Z": 1e21,  # zetta
        "Y": 1e24,  # yotta
    }

    # Normalize the unit by removing plural form if present
    normalized_unit = unit.rstrip("s") if len(unit) > 1 else unit

    # Find the position where the unit_type (case-insensitive) appears in normalized_unit
    unit_type_lower = unit_type.lower()
    normalized_unit_lower = normalized_unit.lower()
    idx = normalized_unit_lower.find(unit_type_lower)
    if idx == -1:
        error(f"Unit type '{unit_type}' not found in '{unit}'")
    prefix = normalized_unit[:idx]

    if prefix not in multipliers:
        allowed = list(multipliers.keys())
        error(f"Invalid unit prefix: '{prefix}'. Supported prefixes are: {allowed}")

    return multipliers[prefix]


def unit(spec, type):
    """Convert a textual value with an optional tolerance into a typed unit.

    If the spec is already of the correct type, it is returned unchanged.

    Supported formats (case‑insensitive):
        "10nF"          -> Capacitance(value = 10e‑9, tolerance = 0.1)
        "10nF 5%"       -> Capacitance(value = 10e‑9, tolerance = 0.05)
        "100kOhm"       -> Resistance(value = 100e3,  tolerance = 0.1)
        "100kOhm 1%"    -> Resistance(value = 100e3,  tolerance = 0.01)
        "100kHz"        -> Frequency(value = 100e3,  tolerance = 0.1)
        "1A"            -> Current(value = 1,       tolerance = 0.1)
        "12V 0.5%"      -> Voltage(value = 12,      tolerance = 0.005)
    """

    if isinstance(spec, type):
        return spec

    if not spec or spec.strip() == "":
        error("unit spec cannot be empty")

    parts = [p for p in str(spec).strip().split(" ") if p]

    # 1. Extract tolerance if provided (last token ending with "%")
    tolerance = 0.0
    last = parts[-1]
    if last.endswith("%"):
        digits = last.rstrip("%")
        if digits == "":
            error(f"invalid tolerance value: '{last}'")
        tolerance = float(digits) / 100.0
        parts = parts[:-1]
        if not parts:
            error("missing value/unit before tolerance specification")

    # 2. Normalise value+unit string (remove internal spaces like "10 nF")
    value_unit = "".join(parts)

    # 3. Separate numeric value from unit suffix
    i = 0
    for ch in range(len(value_unit)):
        if value_unit[ch].isdigit() or value_unit[ch] == ".":
            i += 1
        else:
            break

    if i == 0 or i == len(value_unit):
        error(f"Invalid unit format: '{spec}'. Expected '<number><unit>'.")

    numeric = float(value_unit[:i])
    unit = value_unit[i:]

    # 4. Dispatch based on unit suffix (case‑insensitive)
    u_lower = unit.lower()

    if "ohm" in u_lower:
        numeric *= _check_prefix(unit, "ohm")
        output = Resistance(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("hz"):
        numeric *= _check_prefix(unit, "hz")
        output = Frequency(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("f"):
        numeric *= _check_prefix(unit, "f")
        output = Capacitance(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("h"):
        numeric *= _check_prefix(unit, "h")
        output = Inductance(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("v"):
        numeric *= _check_prefix(unit, "v")
        output = Voltage(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("a"):
        numeric *= _check_prefix(unit, "a")
        output = Current(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("s"):
        numeric *= _check_prefix(unit, "s")
        output = Time(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    # Handle temperature units: Kelvin (K), Celsius (C), Fahrenheit (F)
    if u_lower.endswith("k"):
        # Kelvin, e.g. 300K
        numeric *= _check_prefix(unit, "k")
        output = Temperature(value=numeric, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("c"):
        # Celsius, e.g. 25C
        numeric *= _check_prefix(unit, "c")
        # Convert Celsius to Kelvin
        kelvin = numeric + 273.15
        output = Temperature(value=kelvin, tolerance=tolerance)
        return _check_type(output, type)

    if u_lower.endswith("f"):
        # Fahrenheit, e.g. 77F
        numeric *= _check_prefix(unit, "f")
        # Convert Fahrenheit to Kelvin
        kelvin = (numeric - 32) * 5.0 / 9.0 + 273.15
        output = Temperature(value=kelvin, tolerance=tolerance)
        return _check_type(output, type)

    error(f"invalid unit: {unit}")
    return None
