load("units.zen", "VoltageRange")
load("interfaces.zen", "Power")

Severity = enum("error", "warning", "advice")


def voltage_within(
    within: str | VoltageRange, name: str = "voltage_check", severity: Severity = Severity("error")
) -> typing.Callable:
    def ensure_voltage_within(_module, net_name: str, voltage: VoltageRange, within: str | VoltageRange):
        within = VoltageRange(within)
        # drop nominal in within:
        within = VoltageRange(min=within.min, max=within.max)
        # ensure voltage is within within
        min_valid = voltage.min >= within.min
        max_valid = voltage.max <= within.max
        err_msg = "Voltage range " + str(voltage) + " of " + net_name + " is not within " + str(within)
        check(min_valid and max_valid, err_msg)

    def check_gen(power: Power, severity: Severity = severity, name: str = name):
        check_name = power.NET.name + "_" + name
        if not power.voltage:
            return
        builtin.add_electrical_check(
            name=check_name,
            check_fn=ensure_voltage_within,
            inputs={"voltage": power.voltage, "within": within, "net_name": power.NET.name},
            severity=severity.value,
        )

    return check_gen
