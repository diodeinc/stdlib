load("../properties.zen", "Properties")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

JstGhVariant = enum(
    # Vertical (BM series) - 2 to 14 pins
    "BM02B-GHS-TBT_1x02-1MP_Vertical",
    "BM03B-GHS-TBT_1x03-1MP_Vertical",
    "BM04B-GHS-TBT_1x04-1MP_Vertical",
    "BM05B-GHS-TBT_1x05-1MP_Vertical",
    "BM06B-GHS-TBT_1x06-1MP_Vertical",
    "BM07B-GHS-TBT_1x07-1MP_Vertical",
    "BM08B-GHS-TBT_1x08-1MP_Vertical",
    "BM09B-GHS-TBT_1x09-1MP_Vertical",
    "BM10B-GHS-TBT_1x10-1MP_Vertical",
    "BM11B-GHS-TBT_1x11-1MP_Vertical",
    "BM12B-GHS-TBT_1x12-1MP_Vertical",
    "BM13B-GHS-TBT_1x13-1MP_Vertical",
    "BM14B-GHS-TBT_1x14-1MP_Vertical",
    # Horizontal (SM series) - 2 to 14 pins
    "SM02B-GHS-TB_1x02-1MP_Horizontal",
    "SM03B-GHS-TB_1x03-1MP_Horizontal",
    "SM04B-GHS-TB_1x04-1MP_Horizontal",
    "SM05B-GHS-TB_1x05-1MP_Horizontal",
    "SM06B-GHS-TB_1x06-1MP_Horizontal",
    "SM07B-GHS-TB_1x07-1MP_Horizontal",
    "SM08B-GHS-TB_1x08-1MP_Horizontal",
    "SM09B-GHS-TB_1x09-1MP_Horizontal",
    "SM10B-GHS-TB_1x10-1MP_Horizontal",
    "SM11B-GHS-TB_1x11-1MP_Horizontal",
    "SM12B-GHS-TB_1x12-1MP_Horizontal",
    "SM13B-GHS-TB_1x13-1MP_Horizontal",
    "SM14B-GHS-TB_1x14-1MP_Horizontal",
)

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

variant = config("variant", JstGhVariant, convert = JstGhVariant)
properties = config("properties", dict, optional = True)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _pin_count(variant: JstGhVariant) -> int:
    # Extract pin count from variant string, e.g. "1x02" or "1x14"
    s = variant.value  # Use .value to get the string from the enum
    idx = s.find("1x")
    if idx != -1:
        start = idx + 2
        end = start
        for i in range(start, len(s)):
            if not s[i].isdigit():
                break
            end = i + 1
        return int(s[start:end])
    error("Cannot determine pin count from variant: " + s)

# -----------------------------------------------------------------------------
# IO ports (up to 14 pins)
# -----------------------------------------------------------------------------

pins = {}
for pin in range(1, _pin_count(variant) + 1):
    pins["Pin_{}".format(pin)] = io("Pin_{}".format(pin), Net)

# Add mounting pin
pins["MountPin"] = io("MountPin", Net)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def _footprint(variant: JstGhVariant):
    """Get the appropriate footprint based on variant."""
    s = variant.value  # Use .value to get the string from the enum
    
    # Extract the key parts from the variant string
    if s.startswith("BM"):
        # Vertical series
        pin_count = _pin_count(variant)
        pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
        base_name = "BM" + pin_str + "B-GHS-TBT"
        return File("@kicad-footprints/Connector_JST.pretty/JST_GH_" + base_name + "_1x" + pin_str + "-1MP_P1.25mm_Vertical.kicad_mod")
    elif s.startswith("SM"):
        # Horizontal series
        pin_count = _pin_count(variant)
        pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
        base_name = "SM" + pin_str + "B-GHS-TB"
        return File("@kicad-footprints/Connector_JST.pretty/JST_GH_" + base_name + "_1x" + pin_str + "-1MP_P1.25mm_Horizontal.kicad_mod")
    else:
        error("Unknown variant type: " + s)

def _symbol(pin_count: int):
    """Get the appropriate symbol based on pin count with mounting pin."""
    pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
    # Use the MountingPin variant of the symbol
    return Symbol(library = "@kicad-symbols/Connector_Generic_MountingPin.kicad_sym", name = "Conn_01x" + pin_str + "_MountingPin")

def _mpn(variant: JstGhVariant) -> str:
    """Extract the MPN from the variant string."""
    return variant.value.split("_")[0]

# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

pin_count = _pin_count(variant)

Component(
    name = "JGH",
    type = "jst_gh",
    symbol = _symbol(pin_count),
    footprint = _footprint(variant),
    prefix = "J",
    pins = pins,
    properties = Properties(
        properties,
        {
            "value": _mpn(variant),
        },
    ),
)
