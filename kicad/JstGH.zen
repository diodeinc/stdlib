"""
JST GH Series Connector Component

A configurable JST GH connector that supports:
- 2 to 14 pins configuration
- Vertical (BM series) and Horizontal (SM series) orientations
- 1.25mm pitch
- Includes mounting pin

Example usage:
    JstGH = Module("kicad/JstGH.zen")

    # Vertical 4-pin connector
    JstGH(
        name = "J1",
        pins = 4,
        orientation = "Vertical",
        Pin_1 = Net("VCC"),
        Pin_2 = Net("GND"),
        Pin_3 = Net("SDA"),
        Pin_4 = Net("SCL"),
        MountPin = Net("GND"),
    )
"""

load("../config.zen", "config_properties")

# -----------------------------------------------------------------------------
# Component types
# -----------------------------------------------------------------------------

Orientation = enum("Vertical", "Horizontal")

# -----------------------------------------------------------------------------
# Component parameters
# -----------------------------------------------------------------------------

pins = config("pins", int, default=2)
orientation = config("orientation", Orientation, default=Orientation("Vertical"), convert=Orientation, optional=True)

# Validate pin count
if pins < 2 or pins > 14:
    error("JST GH connectors support 2 to 14 pins. Got: {}".format(pins))

# Properties
properties = config_properties(
    {
        "value": "JST_GH_{}P".format(pins),
        "pins": pins,
        "orientation": orientation,
    }
)

# -----------------------------------------------------------------------------
# IO ports
# -----------------------------------------------------------------------------

# Signal pins
io_pins = {}
for pin in range(1, pins + 1):
    io_pins["Pin_{}".format(pin)] = io("Pin_{}".format(pin), Net)

# Add mounting pin
io_pins["MountPin"] = io("MountPin", Net)

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------


def _get_footprint_map():
    """Returns a map of (pin_count, orientation) -> footprint path."""
    footprint_map = {}

    # Vertical (BM series) footprints
    for pin_count in range(2, 15):
        pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
        base_name = "BM" + pin_str + "B-GHS-TBT"
        key = (pin_count, Orientation("Vertical"))
        footprint_map[key] = (
            "@kicad-footprints/Connector_JST.pretty/JST_GH_"
            + base_name
            + "_1x"
            + pin_str
            + "-1MP_P1.25mm_Vertical.kicad_mod"
        )

    # Horizontal (SM series) footprints
    for pin_count in range(2, 15):
        pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
        base_name = "SM" + pin_str + "B-GHS-TB"
        key = (pin_count, Orientation("Horizontal"))
        footprint_map[key] = (
            "@kicad-footprints/Connector_JST.pretty/JST_GH_"
            + base_name
            + "_1x"
            + pin_str
            + "-1MP_P1.25mm_Horizontal.kicad_mod"
        )

    return footprint_map


def _footprint(pin_count: int, orientation: Orientation) -> str:
    """Get the appropriate footprint based on pin count and orientation."""
    footprint_map = _get_footprint_map()
    key = (pin_count, orientation)

    if key in footprint_map:
        return footprint_map[key]
    else:
        error("No footprint found for {} pins in {} orientation".format(pin_count, orientation.value))


def _symbol(pin_count: int):
    """Get the appropriate symbol based on pin count with mounting pin."""
    pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
    # Use the MountingPin variant of the symbol
    return {
        "library": "@kicad-symbols/Connector_Generic_MountingPin.kicad_sym",
        "name": "Conn_01x" + pin_str + "_MountingPin",
    }


def _mpn(pin_count: int, orientation: Orientation) -> str:
    """Generate the MPN based on pin count and orientation."""
    pin_str = str(pin_count) if pin_count >= 10 else "0" + str(pin_count)
    if orientation == Orientation("Vertical"):
        return "BM" + pin_str + "B-GHS-TBT"
    else:  # Horizontal
        return "SM" + pin_str + "B-GHS-TB"


# -----------------------------------------------------------------------------
# Component definition
# -----------------------------------------------------------------------------

Component(
    name="JGH",
    symbol=Symbol(**_symbol(pins)),
    footprint=File(_footprint(pins, orientation)),
    prefix="J",
    pins=io_pins,
    properties=properties | {"mpn": _mpn(pins, orientation)},
)
